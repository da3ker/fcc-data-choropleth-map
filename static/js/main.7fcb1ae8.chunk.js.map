{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","countyData","setCountyData","educationData","setEducationData","countyUrl","educationUrl","canvas","d3","tooltip","useEffect","fetchEData","a","fetch","response","json","data","console","log","feature","objects","counties","features","fetchCData","max","d","selectAll","enter","append","attr","id","percentage","find","i","on","transition","duration","style","county","html","pageX","pageY","className","x","y","dominantBaseline","textAnchor","width","height","fill","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fcb1ae8.chunk.js","sourcesContent":["import './App.scss';\nimport {useState, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport { feature } from 'topojson';\n\nfunction App() {\n const [countyData, setCountyData] = useState([])\n const [educationData, setEducationData] = useState([])\n\n let countyUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json';\n let educationUrl = 'https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json';\n\n let canvas = d3.select('#canvas')\n let tooltip = d3.select('#tooltip')\n\nuseEffect(() => {\n  async function fetchCData(){\n    let response = await fetch(countyUrl);\n    let data = await response.json();\n    data = feature(data, data.objects.counties).features\n    setCountyData(data)\n    console.log(data)\n      async function fetchEData(){\n        let response = await fetch(educationUrl);\n        let data = await response.json();\n        setEducationData(data)\n        console.log(data)\n      }\n      fetchEData()\n  }\n  fetchCData()\n}, [])\n\nlet max = d3.max(educationData, (d) => d[\"bachelorsOrHigher\"])\nconsole.log(max)\n\nconst drawMap = () => {\n  canvas.selectAll('path')\n        .data(countyData)\n        .enter()\n        .append('path')\n        .attr('d', d3.geoPath())\n        .attr('class', 'county')\n        .attr('fill', (d) => {\n          let id = d['id']\n          let county = educationData.find((i) => {\n            return i['fips'] === id\n          })\n          let percentage = county[\"bachelorsOrHigher\"]\n          \n          if(percentage <= 10){\n            return '#96DEAE'\n          }else if(percentage <= 20){\n            return '#73D393'\n          }else if(percentage <= 30){\n            return '#63AB7B'\n          }else if(percentage <= 40){\n            return '#5ABA7A'\n          }else if(percentage <= 50){\n            return '#40A060'\n          }else{\n            return '#307848'\n          }\n        })\n        .attr('data-fips', (d) => d['id'])\n        .attr('data-education', (d) => {\n          let id = d['id']\n          let county = educationData.find((i) => {\n            return i['fips'] === id\n          })\n          let percentage = county[\"bachelorsOrHigher\"]\n          return percentage;\n        })\n        .on('mouseover', (d) => {\n          tooltip.transition()\n                 .duration(100)\n                 .style('visibility', 'visible')\n\n          let id = d['id']\n          let county = educationData.find((i) => {\n            return i['fips'] === id\n          })\n\n          tooltip.html(county['area_name'] + ', ' + county['state'] + ': ' + county['bachelorsOrHigher'] + '%')\n          tooltip.style(\"left\", d3.event.pageX + 20 + \"px\")\n                .style(\"top\", d3.event.pageY - 20 + \"px\")   \n\n          tooltip.attr('data-education', county[\"bachelorsOrHigher\"])\n        })\n        .on('mouseout', (d) => {\n          tooltip.transition()\n                 .duration(100)\n                 .style('visibility', 'hidden')\n        })\n}\n\nuseEffect(() => {\n  drawMap()\n}, [educationData])\n\n  return (\n    <div className=\"App\">\n     <h2 id=\"title\">United States Educational Attainment</h2>\n     <svg id=\"canvas\">\n     <text id=\"description\" x=\"50%\" y=\"3%\" dominantBaseline=\"middle\" textAnchor=\"middle\">Percentage of adults age 25 and older with a bachelor's degree or higher (2010-2014)</text>\n       <svg id=\"legend\">\n        <g>\n            <rect x=\"880\" y=\"390\" width=\"10\" height=\"10\" fill='#307848' />\n            <text x=\"895\" y=\"398\">51% and above</text>\n        </g>\n\n        <g>\n            <rect x=\"880\" y=\"410\" width=\"10\" height=\"10\" fill='#40A060' />\n            <text x=\"895\" y=\"418\">41% - 50%</text>\n        </g>\n\n        <g>\n            <rect x=\"880\" y=\"430\" width=\"10\" height=\"10\" fill='#5ABA7A' />\n            <text x=\"895\" y=\"438\">31% - 40%</text>\n        </g>\n\n        <g>\n            <rect x=\"880\" y=\"450\" width=\"10\" height=\"10\" fill='#63AB7B' />\n            <text x=\"895\" y=\"458\">21% - 30%</text>\n        </g>\n\n        <g>\n            <rect x=\"880\" y=\"470\" width=\"10\" height=\"10\" fill='#73D393' />\n            <text x=\"895\" y=\"478\">11% - 20%</text>\n        </g>\n\n        <g>\n            <rect x=\"880\" y=\"490\" width=\"10\" height=\"10\" fill='#96DEAE' />\n            <text x=\"895\" y=\"498\">10% and below</text>\n        </g>  \n       </svg>  \n     </svg>\n     <br/>\n     <span id=\"da3ker\">by da3ker</span>\n     <div id=\"tooltip\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}